using System.Net;

namespace DotNetNinja.HelloK8S.Models;

public static class UIHelper
{
    public static Dictionary<HttpStatusCode, string> HttpStatusDescriptions = new Dictionary<HttpStatusCode, string>
    {
        { HttpStatusCode.Continue, "Continue" },
        { HttpStatusCode.SwitchingProtocols, "Switching Protocols" },
        { HttpStatusCode.Processing, "Processing" },
        { HttpStatusCode.EarlyHints, "Early Hints" },
        { HttpStatusCode.OK, "OK" },
        { HttpStatusCode.Created, "Created" },
        { HttpStatusCode.Accepted, "Accepted" },
        { HttpStatusCode.NonAuthoritativeInformation, "Non Authoritative Information" },
        { HttpStatusCode.NoContent, "No Content" },
        { HttpStatusCode.ResetContent, "Reset Content" },
        { HttpStatusCode.PartialContent, "Partial Content" },
        { HttpStatusCode.MultiStatus, "Multi Status" },
        { HttpStatusCode.AlreadyReported, "Already Reported" },
        { HttpStatusCode.IMUsed, "IM Used" },
        { HttpStatusCode.Ambiguous, "Ambiguous" },
        { HttpStatusCode.Moved, "Moved" },
        { HttpStatusCode.Redirect, "Redirect" },
        { HttpStatusCode.RedirectMethod, "Redirect Method" },
        { HttpStatusCode.NotModified, "Not Modified" },
        { HttpStatusCode.UseProxy, "Use Proxy" },
        { HttpStatusCode.Unused, "Unused" },
        { HttpStatusCode.TemporaryRedirect, "Temporary Redirect" },
        { HttpStatusCode.PermanentRedirect, "Permanent Redirect" },
        { HttpStatusCode.BadRequest, "Bad Request" },
        { HttpStatusCode.Unauthorized, "Unauthorized" },
        { HttpStatusCode.PaymentRequired, "Payment Required" },
        { HttpStatusCode.Forbidden, "Forbidden" },
        { HttpStatusCode.NotFound, "Not Found" },
        { HttpStatusCode.MethodNotAllowed, "Method Not Allowed" },
        { HttpStatusCode.NotAcceptable, "Not Acceptable" },
        { HttpStatusCode.ProxyAuthenticationRequired, "Proxy Authentication Required" },
        { HttpStatusCode.RequestTimeout, "Request Timeout" },
        { HttpStatusCode.Conflict, "Conflict" },
        { HttpStatusCode.Gone, "Gone" },
        { HttpStatusCode.LengthRequired, "Length Required" },
        { HttpStatusCode.PreconditionFailed, "Precondition Failed" },
        { HttpStatusCode.RequestEntityTooLarge, "Request Entity Too Large" },
        { HttpStatusCode.RequestUriTooLong, "Request Uri Too Long" },
        { HttpStatusCode.UnsupportedMediaType, "Unsupported Media Type" },
        { HttpStatusCode.RequestedRangeNotSatisfiable, "Requested Range Not Satisfiable" },
        { HttpStatusCode.ExpectationFailed, "Expectation Failed" },
        { HttpStatusCode.MisdirectedRequest, "Misdirected Request" },
        { HttpStatusCode.UnprocessableEntity, "Unprocessable Entity" },
        { HttpStatusCode.Locked, "Locked" },
        { HttpStatusCode.FailedDependency, "Failed Dependency" },
        { HttpStatusCode.UpgradeRequired, "Upgrade Required" },
        { HttpStatusCode.PreconditionRequired, "Precondition Required" },
        { HttpStatusCode.TooManyRequests, "Too Many Requests" },
        { HttpStatusCode.RequestHeaderFieldsTooLarge, "Request Header Fields Too Large" },
        { HttpStatusCode.UnavailableForLegalReasons, "Unavailable For Legal Reasons" },
        { HttpStatusCode.InternalServerError, "Internal Server Error" },
        { HttpStatusCode.NotImplemented, "Not Implemented" },
        { HttpStatusCode.BadGateway, "Bad Gateway" },
        { HttpStatusCode.ServiceUnavailable, "Service Unavailable" },
        { HttpStatusCode.GatewayTimeout, "Gateway Timeout" },
        { HttpStatusCode.HttpVersionNotSupported, "Http Version Not Supported" },
        { HttpStatusCode.VariantAlsoNegotiates, "Variant Also Negotiates" },
        { HttpStatusCode.InsufficientStorage, "Insufficient Storage" },
        { HttpStatusCode.LoopDetected, "Loop Detected" },
        { HttpStatusCode.NotExtended, "Not Extended" },
        { HttpStatusCode.NetworkAuthenticationRequired, "Network Authentication Required" },
    };

    public static List<HttpStatusCode> UIAllowedStatusCodes => 
                HttpStatusDescriptions.Keys.Where(k=>(int)k==200 || (int)k >=400).ToList();
}